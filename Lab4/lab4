import re

def get_number():
    """Function"""
    number = 8
    return number

# Problem 1
def get_position(ch):
    """
    str -> int
    Return positon of letter in alphabet. If argument is not a letter function
    should return None.

    >>> get_position('A')
    1
    >>> get_position('z')
    26
    >>> get_position('Dj')
    None
    """
    upperalphabet = ['0', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
        'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
    loweralphabet = ['0', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',
        'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
    if ch in upperalphabet:
        return upperalphabet.index(ch)
    if ch in loweralphabet:
        return loweralphabet.index(ch)
    if ch not in loweralphabet and ch not in upperalphabet:
        return None

# Problem 8
def number_of_sentences(s):
    """
    str -> str
    Return number of sentence in the string. If argument is not a string function should
    return None.

    >>> number_of_sentences("Revenge is a dish that tastes best when served cold.")
    1
    >>> number_of_sentences("Never hate your enemies. It affects your judgment.")
    2
    >>> number_of_sentences(2015)
    None
    """
    if not isinstance(s, str):
        return None
    count = len(re.findall(r'\.', s))
    return count

# Problem 9
def replace_with_stars(s):
    """
    str -> str
    Replace symbols in string with stars. If argument is not a string function should
    return None.

    >>> number_of_sentences("Revenge is a dish that tastes best when served cold.")
    ****************************************************
    >>> number_of_sentences("Never hate your enemies. It affects your judgment.")
    **************************************************
    >>> number_of_sentences(2015)

    """
    if not isinstance(s, str):
        return None
    replaced = s
    for character in replaced:
        s = s.replace(character, "*")
    return s

# Problem 12
def exclude_letters(s1, s2):
    """
    (str, str) -> str
    Delete all letter from string s2 in string s1. If arguments aren't strings function should
    return None.

    >>> exclude_letters("aaabb", "b")
    aaa
    >>> exclude_letters("abcc", "cczzyy")
    ab
    >>> exclude_letters(2015, "sasd")
    None
    """
    if not isinstance(s1, str) and not isinstance(s2, str):
        return None
    replaced = s2
    for character in replaced:
        s1 = s1.replace(character, "")
    return s1

# Problem 13
def create_string(lst):
    """
    list -> str
    Create and return string from histogrma of letters. If argument isn't list of 26 positive
    integer numbers function should return None.

    >>> create_string([0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    bcc
    >>> create_string([4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4])
    aaaazzzz
    >>> create_string([4, 0, 0, 0, 0, 0])
    None
    """
    if len(lst) != 26:
        return None
    new_string = ""
    lenof = len(lst)
    for item in range(lenof):
        if lst[item] != 0:
            letter = chr(item + 97)
            letters = letter * lst[item]
            new_string = new_string + letters
    return new_string

# Problem 14
def get_letters(n):
    """
    int -> str
    Create and return string of first n letters of an alphabet. If arguments isn't
    positive integer number function should return None.

    >>> get_letters(0)

    >>> get_letters(1)
    a
    >>> get_letters(-2015)
    None
    """
    if n == 0 or n <= 0:
        return None
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    new_string= alphabet[0:n]
    return new_string

# Problem 15
def find_intersection(s1, s2):
    """
    (str, str) -> str
    Find and returs string of all letters in alphabetic order that
    are present in both strings. If arguments aren't strings function
    should return None.

    >>> find_intersection("aaabb", "bbbbccc")
    b
    >>> find_intersection("aZAbc", "zzYYxp")
    z
    >>> find_intersection("sfdfsdf", 2015)
    None
    """
    if not isinstance(s1, str) and not isinstance(s2, str):
        return None 
    for item in s1 and s2:
        if item in s1 and s2:
            return item
        elif (item.isupper() and item in s1) or (item.islower() and item in s2):
            return item.lower()

# Problem 18
def number_of_capital_letters(s):
    """
    str -> str
    Find and return number of capital letters in string. If argument isn't string
    function should return None.

    >>> number_of_capital_letters("ArithmeticError")
    2
    >>> number_of_occurence("EOFError")
    4
    >>> number_of_capital_letters(1)
    None
    """
    if not isinstance(s, str):
        return None
    count = 0
    for item in s:
        if item.isupper():
            count += 1
    return count

# Problem 19
def polygon_area(vertices):
    """
    >>> polygon_area([(4,10), (9,7), (11,2), (2,2)])
    45.5
    >>> polygon_area([(9,7), (11,2), (2,2), (4, 10)])
    45.5
    >>> polygon_area([(0, 0), (0.5,1), (1,0)])
    0.5
    >>> polygon_area([(0, 10), (0.5,11), (1,10)])
    0.5
    >>> polygon_area([(-0.5, 10), (0,-11), (0.5,10)])
    10.5

    """
    len_of_vertices = len(vertices)
    newarea = 0
    for item in range(len_of_vertices):
        if item + 1 != len_of_vertices:
            semiarea = (vertices[item][0] * vertices[item + 1][1] - vertices[item + 1][0] * vertices[item][1])
        else:
            semiarea =  vertices[item][0] * vertices[0][1] - vertices[0][0] * vertices[item][1]
        newarea = newarea + semiarea
    newarea = abs(newarea)
    finalarea = 0.5 * newarea
    return finalarea

# Problem 21
def polynomials_multiply(polynom1, polynom2):
    """
    # (2x)*(3x) == 6
    >>> polynomials_multiply([2], [3])
    [6]
    # (2x-4)*(3x+5) == 6x^2 -2x - 20
    >>> polynomials_multiply([2,-4],[3,5])
    [6, -2, -20]
    # (2x^2-4)*(3x^3+2x) == (6x^5-8x^3-8x)
    >>> polynomials_multiply([2,0,-4],[3,0,2,0])
    [6, 0, -8, 0, -8, 0]

    """
    len_of_first = len(polynom1)
    len_of_second = len(polynom2)
    result = [0] * (len_of_first + len_of_second - 1)
    for item in range(len_of_first):
        for jtem in range(len_of_second):
            result[item + jtem] = result[item + jtem] + polynom1[item]*polynom2[jtem]
    return result

# Problem 24
def numbers_Ulam(n):
    """
    >>> numbers_Ulam(10)
    [1, 2, 3, 4, 6, 8, 11, 13, 16, 18]
    >>> numbers_Ulam(2)
    [1, 2]
    >>> numbers_Ulam(1)
    [1]
    """
    ulamnumbers = [1, 2, 3, 4, 6, 8, 11, 13, 16, 18, 26, 28,
                    36, 38, 47, 48, 53, 57, 62, 69, 72, 77, 82, 87, 97, 99, 102, 106, 114,
                    126, 131, 138, 145, 148, 155, 175, 177, 180, 182, 189, 197, 206, 209,
                    219, 221, 236, 238, 241, 243, 253, 258, 260, 273]
    ulumnumber = ulamnumbers[:n]
    return ulumnumber

# Problem 25
def happy_number(n):
    """
    >>> happy_number(32)
    True
    >>> happy_number(33)
    False
    """
    while n != 1:
        n = str(n)
        j = 0
        for dig in n:
            j += (int(dig)) ** 2
            n = j
        if n == 4:
            return False
    return True

if __name__ == "__main__":
  import doctest
  print(doctest.testmod())